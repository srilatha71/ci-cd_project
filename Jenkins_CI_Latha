// JENKINS CI PIPELINE/
// Purpose: The Code will be built into executable file (.jar) & pushed to Dockerhub
// NOTE:
//  i. Store Dockerhub, EC2 pem key credentials in Jenkins Server
// ii. Install 'ssh agent' plugin in Jenkins

pipeline {
    agent any
       environment{
          DOCKER_USERNAME = "srilatha.devi71@gmail.com"
}

    stages {
        stage("1. Cleanup") {
            // Clean workspace directory for the current build
            steps {
                deleteDir ()             
            }
        }

        stage ('2. Git Checkout') {
            // use pipeline syntax generator to generate below step
            // 'Pipeline syntax' --> Steps 'Smaple step' --> git (enter url & branch & generate)
            steps {
                dir ("DevopsProject1"){
                  script {
                    git branch: 'main', url: 'https://github.com/srilatha71/ci-cd_project.git' 
                  }
                }
            }
        }   
        
   
        stage('3. Maven Build') {
            // Build the application into an executable file (.jar)
            steps{
                dir ("DevopsProject1"){
                  sh 'mvn package'   
                }
            }
        }
           stage('4. Docker Image Build') {
            // Build the application into an executable file (.jar)
            steps{
                dir ("DevopsProject1"){
                  script {
                    def JOB = env.JOB_NAME.toLowercase()
                    sh 'docker build -t ${JOB}:${BUILD_NUMBER} .'
                                     }
                       }
                  }
                }

             stage('5. Docker Image tag') {
            // Build the application into an executable file (.jar)
            steps{
                dir ("DevopsProject1"){
                  script {
                    def JOB = env.JOB_NAME.toLowercase()
                    sh 'docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}'
                    sh 'docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:latest'
                                     }
                       }
                  }
                }
                  stage('6. Trivy Image scan') {
            // Build the application into an executable file (.jar)
            steps{
                dir ("DevopsProject1"){
                  script {
                    def JOB = env.JOB_NAME.toLowercase()
                    sh 'docker tag ${JOB}:${BUILD_NUMBER} ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}'
                    sh 'trivy image ${DOCKER_NAME}/${JOB}:v${BUILD_NUMBER} > scan.txt'
                                     }
                       }
                  }
                }

                   stage('7. Docker Image push') {
            // Build the application into an executable file (.jar)
            steps{
                dir ("DevopsProject1"){
                  script {
                 withCredentials([usernamePassword(credentialsId: 'my_dockerhub_creds', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                     sh "docker login -u '${docker_name}' -p '${docker_pass}'"                   
                     def JOB = env.JOB_NAME.toLowercase()
                    sh 'docker push ${DOCKER_USERNAME}/${JOB}:v${BUILD_NUMBER}'
                    sh 'docker push ${DOCKER_USERNAME}/${JOB}:latest'
                                     }
                       }
                  }
                }


}
}
}
